/*!
 * ${copyright}
 */
/*global sap, jQuery, window */
this.sap = this.sap || {};
(function () {
  sap.ushell = sap.ushell || {};

  function mergeConfig(oMutatedBaseConfig, oConfigToMerge, bCloneConfigToMerge) {
    var oActualConfigToMerge = bCloneConfigToMerge ? JSON.parse(JSON.stringify(oConfigToMerge)) : oConfigToMerge;

    if (typeof oConfigToMerge !== "object") {
      return;
    }

    Object.keys(oActualConfigToMerge).forEach(function (sKey) {
      if (Object.prototype.toString.apply(oMutatedBaseConfig[sKey]) === "[object Object]" &&
          Object.prototype.toString.apply(oActualConfigToMerge[sKey]) === "[object Object]") {

        mergeConfig(oMutatedBaseConfig[sKey], oActualConfigToMerge[sKey], false);
        return;
      }
      oMutatedBaseConfig[sKey] = oActualConfigToMerge[sKey];
    });
  }

  function adjustApplicationConfiguration(oConfig) {
    var aApplicationKeys;
    var oLaunchPageAdapterConfig;
    var oNavTargetResolutionConfig;
    var oAutoGeneratedGroup;

    function fnGetApplicationKeys(oCfg) {
      var aApplicationKeys = [], sApplicationKey;

      if (!oCfg || !oCfg.applications || typeof oCfg.applications !== "object") {
        return aApplicationKeys;
      }
      for (sApplicationKey in oCfg.applications) {

        if (oCfg.applications.hasOwnProperty(sApplicationKey) && sApplicationKey !== "") {
          aApplicationKeys.push(sApplicationKey);
        }
      }

      return aApplicationKeys;
    }

    function fnMakeTile(oApplication, iIdSuffix, sKey) {
      var sApplicationTitle = oApplication.title || oApplication.additionalInformation.replace("SAPUI5.Component=", "").split(".").pop();
      return {
        "id": "sap_ushell_generated_tile_id_" + iIdSuffix,
        "title": sApplicationTitle,
        "size": "1x1",
        "tileType": "sap.ushell.ui.tile.StaticTile",
        "properties": {
          "chipId": "sap_ushell_generated_chip_id",
          "title": sApplicationTitle,
          "info": oApplication.description,
          "targetURL": "#" + sKey
        }
      };
    }

    aApplicationKeys = fnGetApplicationKeys(oConfig);

    if (aApplicationKeys.length) {

      // make sure we have the place for the tiles
      oLaunchPageAdapterConfig = jQuery.sap.getObject("services.LaunchPage.adapter.config", 0, oConfig);

      // make sure group exists
      if (!oLaunchPageAdapterConfig.groups) {
        oLaunchPageAdapterConfig.groups = [];
      }

      oAutoGeneratedGroup = {
        "id": "sap_ushell_generated_group_id",
        "title": "Generated Group",
        "tiles": []
      };
      oLaunchPageAdapterConfig.groups.unshift(oAutoGeneratedGroup);
      aApplicationKeys.forEach(function (sApplicationKey, iSuffix) {
        oAutoGeneratedGroup.tiles.push(
          fnMakeTile(oConfig.applications[sApplicationKey], iSuffix, sApplicationKey)
        );
      });

      oNavTargetResolutionConfig = jQuery.sap.getObject("services.NavTargetResolution.adapter.config.applications", 0, oConfig);
      mergeConfig(oNavTargetResolutionConfig, oConfig.applications, true);

      delete oConfig.applications;
    }

    return oConfig;
  }

  function applyJsonApplicationConfig(sUrlPrefix) {
    var sUrl = jQuery.sap.endsWithIgnoreCase(
      sUrlPrefix, ".json"
    ) ? sUrlPrefix : sUrlPrefix + ".json";
    var oXHRResponse;

    jQuery.sap.log.info("Mixing/Overwriting sandbox configuration from " + sUrl + ".");
    oXHRResponse = jQuery.sap.sjax({
      url: sUrl,
      dataType: "json"
    });
    if (oXHRResponse.success) {
      jQuery.sap.log.debug("Evaluating fiori launchpad sandbox config JSON: " + JSON.stringify(oXHRResponse.data));
      mergeConfig(window["sap-ushell-config"], oXHRResponse.data, true);
    } else if (oXHRResponse.statusCode !== 404) {
      jQuery.sap.log.error("Failed to load Fiori Launchpad Sandbox configuration from " + sUrl + ": status: " + oXHRResponse.status + "; error: " + oXHRResponse.error);
    }
  }

  function getBootstrapScriptPath() {
    var oScripts, oBootstrapScript, sBootstrapScriptUrl, sBootstrapScriptPath;
    oBootstrapScript = window.document.getElementById("sap-ushell-bootstrap");
    if (!oBootstrapScript) {
      // fallback to last script element, if no ID set (should work on most browsers)
      oScripts = window.document.getElementsByTagName("script");
      oBootstrapScript = oScripts[oScripts.length - 1];
    }
    sBootstrapScriptUrl = oBootstrapScript.src;
    sBootstrapScriptPath = sBootstrapScriptUrl.split("?")[0].split("/").slice(0, -1).join("/") + "/";
    return sBootstrapScriptPath;
  }

  function evaluateCustomRenderer(sRenderer) {
    var oSapShellConfig = window["sap-ushell-config"], oApplications;

    if (typeof sRenderer === "string" && sRenderer !== "") {
      oSapShellConfig.defaultRenderer = sRenderer;
    }

    oApplications = jQuery.sap.getObject("services.NavTargetResolution.adapter.config.applications", 5, oSapShellConfig);

    if (typeof oApplications === "object" && oSapShellConfig.defaultRenderer !== "fiorisandbox") {
      delete oApplications[""];
    }
  }

  function bootstrap(fnCallback) {

    var aConfigFiles = jQuery.sap.getUriParameters().get("sap-ushell-sandbox-config", true);
    var sCustomRenderer = jQuery.sap.getUriParameters().get("sap-ushell-sandbox-renderer");
    var i;
    var oClientSideTargetResolutionConfig;
    var oRendererConfig;
    var oUi5ComponentLoaderConfig;
    window["sap-ffsp"] = true; // hint that we are not in the fiori launchpad, but in studio
    jQuery.sap.require("sap.ushell.services.Container");
    jQuery.sap.registerModulePath("sap.ushell.renderers.fiorisandbox", getBootstrapScriptPath() + "../renderers/fiorisandbox/");
    applyJsonApplicationConfig(getBootstrapScriptPath() + "../shells/sandbox/fioriSandboxConfig.json");
    if (aConfigFiles && aConfigFiles.length > 0) {
      for (i = 0; i < aConfigFiles.length; i = i + 1) {
        applyJsonApplicationConfig(aConfigFiles[i]);
      }
    } else {
      applyJsonApplicationConfig("/appconfig/fioriSandboxConfig.json");
    }
    evaluateCustomRenderer(sCustomRenderer);
    window["sap-ushell-config"] = adjustApplicationConfiguration(window["sap-ushell-config"]);
    oRendererConfig = jQuery.sap.getObject(
      "renderers.fiori2.componentData.config",
      0, window["sap-ushell-config"]
    );
    if (!oRendererConfig.rootIntent) {
      oRendererConfig.rootIntent = "Shell-home";
    }
    oUi5ComponentLoaderConfig = jQuery.sap.getObject(
      "services.Ui5ComponentLoader.config",
      0, window["sap-ushell-config"]
    );
    if (!oUi5ComponentLoaderConfig.hasOwnProperty("amendedLoading")) {
      oUi5ComponentLoaderConfig.amendedLoading = false;
    }
    oClientSideTargetResolutionConfig = jQuery.sap.getObject(
      "services.ClientSideTargetResolution.adapter.config",
      0, window["sap-ushell-config"]
    );
    oClientSideTargetResolutionConfig.applications = jQuery.sap.getObject(
      "services.NavTargetResolution.adapter.config.applications",
      undefined, window["sap-ushell-config"]
    );
    sap.ui.getCore().attachInit(
      function () {
        "use strict";
        var loc = window.location;
        var domain = [loc.protocol, loc.hostname].join("//");
        var contextPath = loc.pathname.replace(/\/[a-zA-Y0-9]+.html/, "/");
        var networkLocation = domain + (loc.port ? (":" + loc.port) : "") + contextPath;

        //sactable temp path
        window.sactablelibpath = networkLocation + "thirdparty/sactable/";

        var oClient = sap.firefly.StudioClient.create();
        oClient.setDefaultSyncType(sap.firefly.SyncType.NON_BLOCKING);
        oClient.setSystemLandscapeUrl(networkLocation + "vfs/sdk/production/systems/SystemLandscapeAll.json");
        oClient.setEnvironmentVariable("ff_network_dir", networkLocation);
        oClient.setEnvironmentVariable("ff_kernel_homes", networkLocation + "mufs");
        oClient.setEnvironmentVariable("ff_kernel_user", "FIREFLYUSER/");
        oClient.setEnvironmentVariable("ff_secure", "true");
        oClient.setEnvironmentVariable("ff_sdk", "${ff_network_dir}/vfs/sdk");
        oClient.setEnvironmentVariable("ff_mimes", networkLocation + "mimes");
        oClient.setEnvironmentVariable("ff_system_landscape_uri", networkLocation + "vfs/sdk/production/systems/SystemLandscapeAll.json");
        oClient.setNativeAnchorId("content");
        oClient.runFull();
        window.ffApp = oClient.m_program.getApplication();
      }
    );
    sap.ushell.bootstrap("local").done(fnCallback);
  }
  window["sap-ui-config"] = {
    "xx-bootTask": bootstrap
  };
}());
